cutord <- cut(orderm$V2,5)
orderm$rankgroups <- cut(orderm$V2,5)
table(orderm$rankgroups,orderm$Income.Group)
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran, r_version =="3.1.1",country=="US")
?Comparison
filter(cran, r_version <="3.0.2",country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran,package,ip_id)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size / 2^20)
mutate(cran3, size_mb=size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, new_size =size+1000)
mutate(cran3, correct_size =size+1000)
summarize(cran, avg_bytes=mean(size))
swirl()
library(swirl)
swirl()
submit()
info()
nxt()
submit()
skip()
submit()
skip()
submit()
skip()
View(result3)
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain1.R')
nxt()
select(ip_id,country,package,size) %>%
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain1.R')
nxt()
skip()
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain2.R')
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain2.R')
skip()
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain3.R')
skip()
source('C:/Users/Anne/AppData/Local/Temp/RtmpeiIlG7/chain4.R')
skip()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class, count, -grade)
res <- gather(students2,sex_class, count, -grade)
res
?separate()
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
submit(chain4-correct.R)
submit("chain4-correct.R")
submit()
skip()
students3
?gather
submit()
info()
?submit
?spread
?submit
?submit
extract_numeric("class5")
?mutate
?submit
?mutate
?submit
?submit
students4
?submit
?submit
?submit
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
?bind_rows
bind_rows(passed,failed)
sat
?select
?gather
?separate
?submit
?submit
?submit
?submit
?submit
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
require(lubridate)
install.packages("lubridate")
install(lubridate)
require(lubridate)
year(sampleTimes)
year(sampleTimes) = 2012
year(sampleTimes)
sampleTimes = index(amzn)
year(sampleTimes)
count(year(sampleTimes)==2012)
sum(year(sampleTimes)==2012)
y2012 < sampleTimes[year(sampleTimes)==2012]
y2012 <- sampleTimes[year(sampleTimes)==2012]
day(y2012)
weekday(y2012)
weekdays(y2012)
sum(weekdays(y2012)=="Monday")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution$pm25,region=="west"),col="green")
hist(subset(pollution$pm25,pollution$region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="Easst")
plot(east$latitude,east$pm25,main="East")
library(swirl)
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off(4)
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cara)
head(cara)
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region,data=cars,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data="cars",layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=cars,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
library(swirl)
swirl()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
)xcc
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
p(x,y,pch=19,col=rgb(0,.5..5))
plot(x,y,pch=19,col=rgb(0,.5..5))
plot(x,y,pch=19,col<-rgb(0,.5..5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col+pal(20)
.
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,dataset=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("pont","smooth"))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
g <- ggplot(data=mpg,aes=(displ,hwy))
g <- ggplot(data=mpg,aes(displ,hwy))
?g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_pont(color="pink",size=4,alpha=.5)
g+geom_point(color="pink",size=4,alpha=.5)
g+geom_point(size=4,alpha=.5,aes(color=drv))
g+geom_point(aes(color=drv)) +labs(title="Swirl Rules!") + labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=.5) + geom_smooth(linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=.5) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <-ggplot(data=testdat,aes(myx,myy))
g+geom_line
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(-3,3))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(data=mpg,aes(displ,hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
swirl()
str(diamonds)
qplot(price,data=diamonds)
range(diamond$price)
range(diamonds$price)
qplot(price,data=diamonds,range=18497/30)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm",facets = .~cut)
g <- ggplot(data=diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data=diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(data=diamonds,aes(carat,price)) +geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
?qplot
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3),each=4),sd=0.2)
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
x
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
y
dataFrame<-data.frame(x=x,y=y)
dataFrame
distxy <-dist(dataFrame)
distxy
hClustering<-hclust(distxy)
hClustering
plot(hClustering)
library(swirl)
rm(list=ls())
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
12
abline(h=.05,col="green")
dist(sFsm)
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="blue")
abline(h=.4,col="red")
5
9
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1:2]
svd2[,c(1,2)]
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
(svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
setwd("~/Anne/coursera/reppa1/RepData_PeerAssessment1")
actData <- read.csv("activity.csv")
require(dplyr)
actData2 <- select(actData,steps,interval)
actData2%>%filter(!is.na(steps))%>%group_by(interval)%>%summarize(mean(steps))
summint <- actData2%>%filter(!is.na(steps))%>%group_by(interval)%>%summarize(mean(steps))
copy of the original dataset
imputed <- actData
imputed$steps[is.na(imputed$steps)] <- summint[which(summint$interval==imputed$interval)]$`mean(steps)`
head(imputed)
sumDays <- with(imputed,tapply(steps,date,sum,na.rm=T))
range(sum)
names(sumDays)
range(sumDays)
meanDays <- mean(sumDays)
meanDays
meanDays <- format(mean(sumDays))
meanDays
median(sumDays)
?weekdays
weekdays("2012-11-20")
weekdays(2012-11-20)
weekdays(imputed$date)
str(imputed)
datei <- as.date(imputed$date)
datei <- as.Date(imputed$date)
datei
weekdays(datei)
datei
copyimp <- imputed
copyimp <- mutate(copyimp,dayType=factor(1*(as.Date(date) in c("Saturday","Sunday")),labels=c("weekend","weekday")))
copyimp <- mutate(copyimp,dayType=factor(1*(as.Date(date) %in% c("Saturday","Sunday")),labels=c("weekend","weekday")))
copyimp <- mutate(copyimp,dayType=factor(1*(as.Date(date) %in% c("Saturday","Sunday")),labels=c("weekend")))
head(copyimp)
datei <- as.Date(copyimp$date)
head(datei)
weekdays(datei)
head(weekdays(datei))
head(copyimp)
copyimp <- mutate(copyimp,dayType=factor(1*(weekdays((as.Date(date)) %in% c("Saturday","Sunday")),labels=c("weekend")))
copyimp <- mutate(copyimp,dayType=factor(1*((weekdays(as.Date(date)) %in% c("Saturday","Sunday")),labels=c("weekend")))
copyimp <- mutate(copyimp,dayType=factor(1*(weekdays(as.Date(date)) %in% c("Saturday","Sunday")),labels=c("weekend")))
head(copyimp)
copyimp <- mutate(copyimp,dayType=factor(1*(weekdays(as.Date(date)) %in% c("Saturday","Sunday")),labels=c("weekend","weekday")))
head(copyimp)
weekdays(as.Date(copyimp[1]$date))
head(weekdays(as.Date(copyimp$date)))
head(weekdays(as.Date(copyimp$date)) %in% c("Saturday","Sunday"))
1 * head(weekdays(as.Date(copyimp$date)) %in% c("Saturday","Sunday"))
daytype <- factor(1 * (weekdays(as.Date(copyimp$date)) %in% c("Saturday","Sunday")),labels = c("Weekend","weekday"))
head(daytype)
copyimp <- mutate(copyimp,dayType=factor(1*(weekdays(as.Date(date)) %in% c("Saturday","Sunday")),labels=c("weekday","weekend")))
head(copyimp)
tail(copyimp)
str(copyimp)
meanInt <- with(actData,tapply(steps,interval,mean,na.rm=T))
str(meanInt)
?transform
with(actData,plot(interval,mean(steps),type="l"))
?plot
with(actData,plot(interval,mean(steps),type="l"))
plot(actData$interval,mean(actData$steps),type="l")
?tapply
tapply(copyimp$steps,list(copyimp$interval,copyimp$dayType),mean)
tryplot <- tapply(copyimp$steps,list(copyimp$interval,copyimp$dayType),mean)
plot(tryplot$interval,tryplot$weekend,type="l")
plot(tryplot$weekend,type="l")
names(tryplot)
plot(tryplot,type="l")
str(tryplot)
plot(tryplot[,1],type="l")
tryplot <- as.Data.Frame(tapply(copyimp$steps,list(copyimp$interval,copyimp$dayType),mean))
tryplot <- as.data.frame(tapply(copyimp$steps,list(copyimp$interval,copyimp$dayType),mean))
str(tryplot)
plot(tryplot$weekday,type="l")
?par
par
?axis
?plot
